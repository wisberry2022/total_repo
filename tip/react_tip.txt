React 기초

React 파일

React Start
	-> 리액트 프로젝트 시작: npx create-react-app <folder name>
		ex) npx create-react-app test_react
	-> 리액트 실행: npm start
	-> 리액트 빌드: npm run build

npm install을 이용하면 다른 PC에서도 동일한 환경으로 리액트를 사용할 수 있다

package.json
	-> 사용자가 다운받은 라이브러리나 프로그램의 내역을 자동으로 기록한다

src/.git ignore
	-> react 폴더/파일 중 git에 올리지 않을 파일들을 추가/삭제 할 수 있다

Scss in React
	-> node-sass는 nodejs 버전에 영향을 받는다 따라서 node-sass 보다는 sass 패키지 사용이 권장된다
		-> sass는 node-sass를 흡수한 최신 버전의 패키지이다.
		ex) npm i -D sass 로 설치하면 scss 적용이 된다.

경로
	-> react 컴포넌트에서 이미지를 임포트할 때, 실제 서로간의 폴더의 레벨이 달라도 그것을 신경쓰지 않고 임포트해줄 수 있다.
		ex) <img src = "./img/ddd.png"> in ./doc/test.js -> 실제 img 폴더가 /doc 폴더보다 상위 디렉토리에 있다하더라도 ./img로 바로 작성해주면 된다.
		-> 컴파일 과정에서, 모든 파일이 동등한 경로에 있다고 취급하기 때문

빌드
	-> 빌드 이후에 .js/.html/.css를 수정하였을 경우 실시간 반영은 되지 않는다. 따라서 새롭게 빌드를 해주어야 한다


==========================================================================================

HTML in React

<table> tag
	- 리액트에서 table을 사용할 때는 tbody 태그를 꼭 사용하여야 한다
		-> 그렇지 않을 경우 오류 발생

<img> tag
	- 이미지 태그 및 input 태그와 같이 별도의 클로징 태그가 없는 경우, 끝부분에 '/'를 반드시 작성한다
		ex) <img src = "..." alt = "..."> (x) => 컴파일 오류 발생 / <img src = "..." alt = "..." /> (o)


=========================================================================================

CSS in React

background-image 넣기
	- public에 넣은 파일은 background-image로 불러 올 수 없다. src 폴더에 이미지를 넣어야 한다.


=========================================================================================
컴포넌트(src/App.js)
	-> export default App; 을 작성해주어야 한다
		* export default 뒤에 곧바로 컴포넌트 리턴 함수를 지정해줄 수도 있다
			ex) export default function Header() { return ... }
	-> 작성 시 첫글자는 반드시 대문자여야 한다
		ex) <Header></Header>
	-> 작성 시 클로징 태그는 작성하지 않아도 된다
		ex)<Header />
	-> 컴포넌트 작성 시 반드시 하나의 태그 안에 감싸주어야 한다
		ex) <div> ... </div> (태그 이름을 써주지 않아도 된다) (React Fragment)
	
	-> 태그 내에 자바스크립트 코드를 넣고 싶을 때는 {}를 사용하면 된다.
		ex) const Test = (props) => {
			return ( <> {console.log(props)} )
		     }
	-> HTML class 사용 시, class라 작성하지 않고 className이라 작성해야 한다
	-> 컴포넌트 내 HTML 태그에 인라인 스타일을 적용할 수 있다.
		ex) <ul style = {{ color: 'red' }}>
		     <ul style = {{ color: 'red' fontSize: '40px' }}
	-> render 함수 이전에 별도의 함수를 생성하여 render 함수 내에서 컴포넌트처럼 사용할 수 있다
		ex) function Home() {
			  return <i>HOME</i>
		     }


		    const App = () => {
			  return <p>
			    <Home />
			  </p>
	                }
		* function Home()의 경우 render 함수 아래 / 내부(내부일 경우 return 이전에 작성하여야 한다)에 작성하여도 정상적으로 작동한다

prop
	-> 특정 컴포넌트에서 선언한 데이터를 다른 컴포넌트로 전달해줄 수 있다.
		ex) 컴포넌트 내에서 <Main key=value /> 와 같은 형태로 전달할 수 있다
	-> 전달받은 props는 object의 형태로 전달된다(key와 value를 가진다)
	-> props를 전달받을 컴포넌트에서는 함수 매개변수로 작성해주면 된다.
		ex) const Test = (props) = { return ( ... ) }
		* 매개변수를 삽입하는 부분에 비구조 할당을 바로 사용할 수 있다.
			ex) const Test = ( {value1, value2} ) => { return ( ... ) }
	-> props를 웹 브라우저에 출력시키고 싶다면 {} 를 사용한다
		ex) const Test = (props) = { return ( <> {props.property} </> ) }
	-> 전달받은 매개변수 값이 없을 때 props의 기본 값을 설정할 수 있다.
	-> 기본 props를 작성할 때에는 컴포넌트 생성 함수 바깥에 써야한다
		ex) Main.defaultProps = { work: 'plaing' }
	-> 완성된 컴포넌트를 하나의 컴포넌트로 감싸주어 하위 컴포넌트들을 props로 전달해줄 수 있다.
		ex) const App = () => { return ( <Wrapper> <Header /> ... </Wrapper ) } in App.js
			* Wrapper 컴포넌트는<Header />, <Main />과 같은 컴포넌트들을 props로 가지게 된다
		ex) const Wrapper = (props) => { return ( <> {props.children} </> ) } in Wrapper.js
	-> 태그 안에 들어간 prop 요소들은 모두 {}를 사용해야 한다.
		ex) function Header(props) { return ( <header> ... {props.member.map(el => <li>{el.name}</li>)} </header> ) }
	-> props를 통해 숫자 value를 전달하고 싶다면 {}를 사용하여야 한다
		ex) <Test list = 'name' age = {29} />
	-> props를 받아올 때 매개변수 작성 시 비구조 할당을 시도할 수 있다.
		ex) const Test = (props) => { ... } -> const Test = ({list, age, name}) => {...}
	-> 함수도 prop을 통해 전달할 수 있다 App.js에서 useState로 선언한 변수를 제어하는 함수를 설정하고, 이를 다른 컴포넌트 파일로 props를 통해 전달한 뒤 해당 함수를 이벤트로 등록하면 App.js에 설정된 변수가 변경된다

hook
	-> hook을 사용하기 위해서는 render 함수 내부에 작성하여야 한다

useState
	-> useState 사용 전 import { useState } from "react"; 를 작성해야 한다
	-> React 내에서 선언하는 변수
		* 페이지 내에서 특정 이벤트에 의해 변동사항이 생기는 데이터를 다룰 때 사용한다.
		* var, let를 통해 선언된 변수는 스크립트 내에서 변수 내용을 변경할 수 있어도 다시 DOM을 다시 렌더링해주지 못한다. 
		  하지만 state를 통해 변수를 선언하면 변수 내용 변경 시 웹 브라우저에서 새로고침 없이 DOM을 자동으로 다시 렌더링해주기 때문에 state를 사용한다

	-> 컴포넌트 안에서 관리된다
	-> Render 함수 이전에 state를 사용해야 한다
		ex) function App() { const [TEST, setTest] = useState() return ( ... ) }
	-> State의 변경된 값을 HTML에 직접 출력하고 싶을 땐, useState 사용 시 작성하였던 setTest 함수를 활용하여야 한다 render 함수 내부에 이벤트 작성 시 선언할 수 있다
		ex) let [num, setNum ] = useState(1) ... function App() { return ( setNum(num+1) ... }

useRef
	-> render 함수 내에 작성된 HTML 태그를 참조할 수 있는 컴포넌트 기술
		ex) const link = useRef(); ... <div ref = {link}>TEST</div>
	-> link 변수에는 div 태그가 담기게 된다. 만약 link.current를 사용하면 참조 된 태그와 태그의 컨텐츠까지 함께 확인할 수 있다.
		
useEffect
	-> react의 컴포넌트가 한번 렌더링 -> 업데이트 과정을 거칠 때 딱 한 번 실행하게 하는 Hook
		ex) useEffect(() => { ... }, [ ])
			* 두번째 인자인 빈 배열은 의존성 배열로, 컴포넌트 실행 시 딱 한 번만 실행하게 되라는 의미이다. 생략할 시 문제가 생긴다

Route
	-> 컴포넌트로 생성한 페이지들을 링크로 연결해주는 모듈
	-> react-route-dom 이라는 라이브러리를 설치하여 사용할 수 있다.
	-> App.js 에서 react-route-dom을 임포트하고 BrowserRouter, Routes, Route를 임포트한다.
		ex) import { BrowserRouter, Routes, Route } from 'react-router-dom'
	-> Route 컴포넌트는 Routes 컴포넌트로 감싸주어야 하고, Routes 컴포넌트는 BrowserRouter로 감싸주어야 한다
		ex) <BrowserRouter>
			<Routes>
				<Route path = "/" element={<Section01 />} />
			<Routes>
	-> Route 컴포넌트를 통해 사용자 임의 url을 설정하여 특정 컴포넌트(페이지)로 이동할 수 있도록 설정할 수 있다.
		ex) <Route path = '/'(사용자 임의 url) element = {<Section 01 />}(임포트한 컴포넌트) />
			-> 이 코드만으로도 element의 Section이 자동으로 렌더링 된다.
	-> Route 컴포넌트 내부의 element는 component로도 사용할 수 있다.
	! 만약 '/About'과 같은 다른 Route를 설정할 경우, 실제 페이지의 루트 페이지로 이동하더라도 /About페이지까지 모두 렌더링 된 것을 확인할 수 있다. 
		-> 이는 '/About'을 렌더링 할 때, '/'과 '/About'을 모두 렌더링 해버리기 때문에, path 뒤에 exact = {true}라는 props를 넣어야 한다
		-> router-dom v5 버전의 속성으로, v6 버전을 사용하고 있다면 exact 속성을 사용할 수 없다
	-> 컴포넌트(App.js가 아닌)에서 Link를 통해 HTML의 <a>태그와 같은 기능을 부여할 수 있다. Link를 사용하여야 React를 활용한 본격적인 SPA가 되는것이다
		ex) import { Outlet, Link } from "react-router-dom";
	-> <Link></Link>와 같은 형태로 사용할 수 있다.
		ex) <Link to = "/section01">text</Link>
		-> to에는 App.js에서 Route를 통해 설정한 사용자 임의 url을 입력하여야한다.

변수
	-> render 함수 내에서 return 이전에 선언된 변수를 직접 출력하고 싶을 때는 {}으로 변수를 감싸주어야 한다
		ex) function App () { const a = 'A'; return ( {a} ) }

Import
	-> App.js에서 default를 통해 export했다면, index.js에서 import 할 때에는 App.js에 포함된 함수 이름은 사용자가 마음대로 지정해줄 수 있다. 하지만 함수 이름을 맞춰주는 것이 좋다.

event in React
	<button onClick={
	        ( ) => (
		          setNum(num + 1),
		          console.log(num)
		        )
	 }>Click</button>

	-> 태그 내에 이벤트 함수를 작성할 때에는 일반 JS에서 사용하던 것과는 다르다. 
		* ( ) => {} 로 사용하던 것을 ( ) => ( ) 로 사용하여야 한다.
		* ( ) => { console.log('a'); console.log('b') } 로 사용하던 것은 ( ) => { console.log('a'), console.log('b') }로 사용할 수 있다

css in React
	- 일반적으로 css를 적용하는 것처럼 사용할 수 있지만 js 내에서 객체로 만들어 전달할 수도 있다
		ex) const css = {fontSize: '100px', color: '#f00'} -> <div style={css}></div>
	- css를 모듈파일로 만들어 임포트하여 적용시킬 수도 있다
		ex) <name>.module.css => 이때, .module은 반드시 작성해야한다
	- 임포트한 css 파일은 컴포넌트내에서 사용할 수 있는데, 이 때 스타일은 객체처럼 작동하기 때문에 아래와 같이 적용시킬 수 있다
		ex) import styles from './TopBanner.module.css';
		     <div className = {style.test}></div>

map in React
	- React에서 map을 사용하여 반복적인 HTML 요소를 생성할 때에는 반복되는 HTML 요소마다 서로 다른 값을 가진 key값을 부여해주어야 한다
		const List = () => {
  			return (
			    <ul>
			       {
				DATA.map(
				  (it) =>
				            <li key={it.id}> => 이 때, map 함수의 callback function의 인자로 들어오는 idx를 사용하는 것은 권장하지 않는다
				              {it.name}은 {it.age}살 {it.sleep ? '수면 중' : '놀고있음'}
				            </li>)
				}
			    </ul>
			  )
		}