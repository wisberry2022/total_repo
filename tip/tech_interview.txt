REST API
	- 정보들이 주고받아지는데 있어 개발자들 사이에 널리 쓰이는 형식
	- 각 요청들이 어떤 동작이나 정보를 위한것인지 요청의 모습 자체로 추론 가능하다.
	

	1. GET:  데이터 조회 시 사용하는 HTTP 메소드
	2. POST: 새로운 데이터를 추가하는 HTTP 메소드
	3. PUT/PATCH: put은 정보를 통째로 갈아끼울 때, patch는 데이터 일부를 특정 방법으로 수정할 때
	4. delete: 데이터 삭제

	URI에 요청의 행위를 명시해야하는데, 이 때 URI는 동사가 아닌 명사가 되어야한다.
	
	- HTTP 요청을 보낼 때 어떤 URI에 어떤 메소드를 사용할 지 개발자들 사이에 널리 사용되는 형식이 REST API이다.


프로세스 / 스레드
	- 실행단위 - cpu core에서 실행하는 하나의 단위로 프로세스와 스레드를 포괄하는 개념
	- 프로세스 - 하나의 스레드만 가지고 있는 단일 스레드 프로세스
	- 동시성(Concurrency) - 한 순간에 여러가지 일이 아니라, 짧은 전환으로 여러가지 일을 동시에 처리하는 것처럼 보이는 것


	- Process
		-> 파일 형태인 Program이 실행된 형태
		-> 프로그램이 메모리에 등록된다면, 프로그램이 실행되고 프로세스가 된다. 이 때, 프로세스의 구조는 
			1. Code - 실행 명령을 포함하는 코드들
			2. Data - Static 변수 혹은 Global 변수
			3. Heap - 동적 메모리 영역
			4. Stack - 지역변수, 매개변수, 반환 값 등등 일시적인 데이터
		-> 단일 CPU에는 단일 프로세스만 올라올 수 있다. 즉, 컴퓨터에서 실행하고 있는 여러가지 프로그램들은 단일 CPU에서 동시에 처리되지 못한다.
			-> 다수의 프로세스들은 실행, 준비 상태를 전환해가며 CPU 메모리에 올라가고 내려가고를 반복한다. 이를 컨텍스트 스위칭(Context Switching)

	- Thread			
		=> 이러한 복잡한 과정을 극복하기 위해 경량화된 프로세스 버전인 스레드가 탄생한다.
			=> 스레드는 부모 프로세스 내부에 위치하며, 부모 프로세스의 공용 자원을 함께 사용한다. 
				* 공유되는 자원이 있기에 컨텍스트 스위칭 발생 시 캐싱 적중률이 올라간다. 즉, CPU에 등록할 자원을 모두 제거하지 않아도 된다는 의미

멀티프로세스와 멀티스레드
	* 한 어플리케이션을 작업하는 데 있어 사용할 수 있는 처리방식(소프트웨어적 측면 강하다)
	- Multi Process
		=> 부모 프로세스가 fork()를 진행하여 자식 프로세스를 여러 개 만들어서 일을 처리하도록 한다.
		=> 자식 프로세스는 부모 프로세스와는 다른 메모리 영역을 확보하게 된다
		=> 각 프로세스를 독립적이며 자원 소모적이고 개별 메모리 차이가 생긴다. Context Switching 비용이 크다.
			=> 하나의 프로세스가 문제가 생기더라도 다른 프로세스에는 문제가 생기지 않는다.
		=> 동기화 작업이 불필요하다.
	- Multi Thread
		=> 단일 프로세스(한 어플리케이션)에 대한 작업의 단위가 나누어질 때, 각각의 스레드가 나누어진 작업 단위를 담당하게 된다.
		=> Thread끼리 긴밀하게 연결되어 있다.
			=> 따라서 여러 스레드 중 하나의 스레드에 문제가 생기면 프로세스가 먹통이 되는 경우가 있다.
		=> Context Switching 비용이 적다.
		=> 공유 자원 관리 및 동기화 작업이 필요하다.
		


멀티코어
	* 동시성(Concurrency)과 병렬성(Parallelism)의 개념을 가진다(하드웨어적 측면 강하다)
		-> 싱글코어의 경우 동시성을 활용하여 여러 프로세스를 전환하며 어플리케이션을 처리한다.
		-> 짧은 순간에 cpu의 시간을 분할해서 마치 동시에 여러 프로세스를 실행하는 것처럼 보이게한다.
	* 멀티코어는 물리적으로 여러 코어를 사용하여 다수의 실행단위를 한 순간에 동시에 처리할 수 있게 해준다.(병렬성)		
		-> 둘 이상의 코어에서 동시에 하나 이상의 프로세스(혹은 스레드)가 한꺼번에 진행되는 것

Blocking vs None-blocking
	Blocking
		-> 다른 주체가 작업할 때 자신의 제어권이 없다.(다른 작업이 끝날 때까지 기다려야한다)
	None-blocking
		-> 다른 주체가 작업할 때 자신의 제어권이 있다.(다른 작업이 진행 중일 때 자신의 작업을 진행할 수 있다)