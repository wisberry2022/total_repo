Expression & Statement
	* Expression(수식)
		- 하나 이상의 값으로 표현(reduce)될 수 있는 코드를 의미
			-> 사칙연산과 같은 식들(1+1, 2+5)
		- expression은 평가(evaluate)가 가능해서 하나의 '값'으로 환원될 수 있다.
			-> 사칙연산 수식, 함수 호출( function( ) ), 변수 이름 등의 식별자, 배열 등의 할당 연산자( [ ] ) 등까지도 포함한 식을 의미

	* Statement(진술 / 서술)
		- 실행 가능(executable)한 최소의 독립적인 코드 조각을 의미
			-> 조건문(if 문), 반복문(for 문)
		- 컴파일러가 이해하고 실행할 수 있는 모든 구문은 statement이다.
		- 한 개 이상의 expression과 프로그래밍 키워드를 포함하는 경우가 많다

	- expression은 statement의 부분집합이다.
		-> 모든 expression은 statement의 부분집합이다.

Interface
	- 2개 이상의 장치나 소프트웨어 사이에서 정보나 신호를 주고받을 때 그 사이를 연결하는 장치나 경계면, 또는 연결하는 경계에서 상호 접속하기 위한 하드웨어, 소프트웨어, 조건, 규약 등을 의미
		-> 컴퓨터와 사용자 간의 통신이 가능하도록 하는 장치 or 프로그래밍
		-> 서로 다른 장치끼리 통신/동작할 수 있도록 도와주는 장치

REPL(Read-Eval-Print-Loop)
	- Interactive toplevel / language shell과 동일한 의미로 사용
	- 단일 사용자의 입력을 취하고 이를 평가(실행)하고 결과를 사용자에게 반환시키는 단순한 상호작용 컴퓨터 프로그래밍 환경
		-> REPL 환경으로 작성된 프로그램은 구간마다 실행된다.
		-> 일반적인 REPL 환경으로는 프로그래밍 언어를 위한 명령 줄 셸 및 유사환경을 꼽을 수 있다
	- REPL에서 사용자는 하나 이상의 식을 입력하면 전체 컴파일 단위가 아닌 입력한 식을 개별적으로 평가하고 결과를 표시한다

Skeleton Code
	- 하나의 프로그램이 동작하는 전체 과정을 한눈에 알아볼 수 있도록 그 구조를 나타낸 틀